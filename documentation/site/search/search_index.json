{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Nuke Survival Toolkit Documentation Release v2.1.0 For online documentation visit Nuke Suvival Toolkit Documentation About The Nuke Survival Toolkit is a portable tool menu for the Foundry\u2019s Nuke with a hand-picked selection of nuke gizmos collected from all over the web, organized into 1 easy-to-install toolbar.","title":"Intro"},{"location":"index.html#nuke-survival-toolkit-documentation","text":"Release v2.1.0 For online documentation visit Nuke Suvival Toolkit Documentation","title":"Nuke Survival Toolkit Documentation"},{"location":"index.html#about","text":"The Nuke Survival Toolkit is a portable tool menu for the Foundry\u2019s Nuke with a hand-picked selection of nuke gizmos collected from all over the web, organized into 1 easy-to-install toolbar.","title":"About"},{"location":"about.html","text":"Best Documentation Ever","title":"About"},{"location":"about.html#best-documentation-ever","text":"","title":"Best Documentation Ever"},{"location":"installation.html","text":"Installation Here\u2019s how to install and use the Nuke Survival Toolkit: Download the .zip folder from the Nuke Survival Toolkit github website. https://github.com/CreativeLyons/NukeSurvivalToolkit_publicRelease/releases/latest This github will have all of the up to date changes, bug fixes, tweaks, additions, etc. So feel free to watch or star the github, and check back regularly if you\u2019d like to stay up to date. Copy or move the NukeSurvivalToolkit Folder either in your User/.nuke/ folder for personal use, or for use in a pipeline or to share with multiple artists, place the folder in any shared and accessible network folder. Open your init.py file in your /.nuke/ folder into any text editor (or create a new init.py in your User/.nuke/ directory if one doesn\u2019t already exist). Copy the following code into your init.py file: nuke.pluginAddPath(\"Your/NukeSurvivalToolkit/FolderPath/Here\") Copy the filepath location of where you placed your NukeSurvivalToolkit. Replace the Your/NukeSurvivalToolkit/FolderPath/Here text with the NukeSurvivalToolkit filepath location, making sure to keep quotation marks around the filepath. Save your init.py file, and restart your Nuke session. That\u2019s it! Congrats, you will now see a little red multi-tool in your nuke toolbar.","title":"Installation"},{"location":"installation.html#installation","text":"Here\u2019s how to install and use the Nuke Survival Toolkit: Download the .zip folder from the Nuke Survival Toolkit github website. https://github.com/CreativeLyons/NukeSurvivalToolkit_publicRelease/releases/latest This github will have all of the up to date changes, bug fixes, tweaks, additions, etc. So feel free to watch or star the github, and check back regularly if you\u2019d like to stay up to date. Copy or move the NukeSurvivalToolkit Folder either in your User/.nuke/ folder for personal use, or for use in a pipeline or to share with multiple artists, place the folder in any shared and accessible network folder. Open your init.py file in your /.nuke/ folder into any text editor (or create a new init.py in your User/.nuke/ directory if one doesn\u2019t already exist). Copy the following code into your init.py file: nuke.pluginAddPath(\"Your/NukeSurvivalToolkit/FolderPath/Here\") Copy the filepath location of where you placed your NukeSurvivalToolkit. Replace the Your/NukeSurvivalToolkit/FolderPath/Here text with the NukeSurvivalToolkit filepath location, making sure to keep quotation marks around the filepath. Save your init.py file, and restart your Nuke session. That\u2019s it! Congrats, you will now see a little red multi-tool in your nuke toolbar.","title":"Installation"},{"location":"menus.html","text":"Menus The tool menu\u2019s categorisation is laid out in a bit of a mix between Nuke\u2019s original toolbar organisation, and Nukepedia\u2019s gizmo categories. This should be helpful and intuitive when browsing for certain types of tools, or to quickly find the tool you are looking for if you forget the name. Some of these menus have sub-menus such as Filter/Glows/ for further groupings to reduce the overall list size of each menu. Nuke Survival Toolkit Menu Bar: Nukepedia Menu Bar","title":"Menus"},{"location":"menus.html#menus","text":"The tool menu\u2019s categorisation is laid out in a bit of a mix between Nuke\u2019s original toolbar organisation, and Nukepedia\u2019s gizmo categories. This should be helpful and intuitive when browsing for certain types of tools, or to quickly find the tool you are looking for if you forget the name. Some of these menus have sub-menus such as Filter/Glows/ for further groupings to reduce the overall list size of each menu. Nuke Survival Toolkit Menu Bar: Nukepedia Menu Bar","title":"Menus"},{"location":"techSpecs.html","text":"Technical Details There are a few things about this menu that try and make it both easy and safe to use. In the main folder there is a menu.py file that is used to add 5 relative plugin paths. These are the following folders: ./gizmos - for all NST gizmo files ./nk_files - for all NST .nk scripts ./python - 1 helper file, and a handful of tool-specific python files ./icons - for all tool icons ./images - for all image files required for some tools/examples This has changed from the v1.1.1 version of the NST to be relative paths. There were some network startup slowdowns happening from nuke recursively adding many pluginPaths in the previous init.py. Removing all the folders and narrowing it down to just 5 seemed to speed up start up time while keeping the menu looking the same. Also adding the plugin paths in the menu instead of the init made sure that there was not unnecessary load time happening for renderfarms or command-line nuke sessions where the GUI and menu isn\u2019t needed. The menu.py in the main folder is primarily building almost the entire toolkit menu. You will find it organized into sections: Draw, Time, Color, Filter , etc. The tools will show up in the order that you designate them in this menu. Nuke does not like to load multiple gizmo files with the same name. Because the Nuke Survival Toolkit may be added into company pipelines that already have many gizmo\u2019s being loaded in, I have given all .gizmo files their own prefix \u201cNST_\u201d . This means all files should have a unique name to any file that would be already installed. For example, if there was an iBlur.gizmo installed, the one in Nuke Survival Toolkit is named NST_iBlur.gizmo , so there should be no conflicts. In the main menu.py at the top, there is a variable that you can replace if you choose to find/replace the \"NST_\" prefix to a custom one for all the gizmos. You could do this with a renaming software or via the terminal for all gizmos with the \"NST_\" prefix. If you change \"NST_\" to \"WOW_\" for example, just enter \"WOW_\" in this variable. This might help if two different Nuke Survival Toolkits are being loaded at once, to keep them unique. All gizmo\u2019s are stored as .gizmo files on the folder system, but are all actually loaded into nuke as Groups, with no link back to the gizmo filepath. This is a strange bug / feature / work around that sort of tricks nuke into thinking you have loaded a gizmo, but actually have loaded a group. There are a few advantages to this method: Nuke will automatically open the properties panel of the tool, unlike if you nuke.nodePaste() a .nk file Nuke actually stores the defaults of the gizmo in memory, during that specific nuke session. This means you will be able to ctrl + right click on knobs and reset them to their intended default settings. This unfortunately goes away once you close and re-open the script, as nuke will just consider the nodes a normal group and will not know what the defaults are. Groups are generally easier to debug and enter inside to see what is going on. This will help with render farms or other users opening scripts that would normally be sourcing the gizmos from wherever you have placed the Nuke Survival Toolkit. Sometimes render farms or other users cannot access your local directories, which might cause errors when other artists or render farms are trying to open the script, since they may not be loading the NukeSurvivalToolkit. Making sure the tools are Groups will mean the tools exist in your nuke script and will never be unlinked/unsourced when someone else is opening the nuke script. If you prefer to use gizmos instead of groups, you simply have to open the gizmo in a text editor and change where it says \"Group\" at the top of each .gizmo file, and replace it with \"Gizmo\" . It is case sensitive, so make sure you capitalize Gizmo or Group. Removed all x and y node graph positions from the gizmos, (xpos and ypos). If you leave these in; when you have a node selected and create a gizmo, instead of spawning under the node, it can fly to the part of the node graph where the x and y positions were stored at. Removed all Nuke Version lines from the gizmos to avoid annoying errors about different versions. Most of these tools were tested using Nuke 11.3v4, but that does not mean they require that version. Some gizmos were created for different versions, so please use the links provided to see what versions the tools are compatible with if something is not working. Tried consolidating the types of channels the gizmos might be bringing into your scripts by making sure they are using the same types of channel names. For example, all Position World pass channels will come in as P.red, P.green, P.blue, P.alpha , and all Normals World pass channels will come in as N.red, N.green, N.blue, N.alpha . There are a few exceptions where some tools are using unique channel names, but for the most part they are always using .red, .green, .blue, .alpha, .u, or .v at the end of the channels. Most channel/layer names are kept as the original tool had them. For example apChroma, hag_pos, despill, etc. Added an Author Tag to the end of all Gizmos in the menu. NKPD just stands for Nukepedia, where I did not make a custom tag if there weren't many tools from this author. These might help in 2 ways: To filter for certain tools if you want to search by all of Adrian Pueyo\u2019s AP tools or Mark Joey Tang\u2019s MJT tools using nuke\u2019s tab search. Will also help you identify who made what, and make it easier to find in the Tool Documentation To help identify that this gizmo is from the Nuke Survival Toolkit, in case there are duplicate tools in the pipeline loaded with the same name. Dealing with Hard Coded filepaths on Gizmo Creation There is a function, filepathCreateNode() , stored in the NST_helper.py file, that first detects if the Group/Gizmo being created has a Read, DeepRead, ReadGeo, Camera, Axis . Then, if the file knob in the node contains the string <<<replace>>> in the filepath, this will be replaced by the location where the NukeSurvivalToolkit is stored. This means for templates, example scripts, and occasional gizmos that require image files, They will be created with hardcoded links pointing to images in the Nuke Survival Toolkit. This was necessary because if I manually hardcoded the filepath, it will error because it does not know where your NST image is. If you use a live variable, similar to [root.name] to try and point to the NST, it will work for you and anyone with the same NST installed, but not if you try and render on a renderfarm without the NST installed or pass the script to the artist without the NST installed, as nuke won\u2019t find the variable and won\u2019t know where to point to. Replacing the variable and hard coding the filepath on creation is the best way to make sure the tool to work with anyone opening the script, as long as the Nuke Survival Toolkit does not move locations, or the image file is not moved, deleted, renamed, etc","title":"Tech Specs"},{"location":"techSpecs.html#technical-details","text":"There are a few things about this menu that try and make it both easy and safe to use. In the main folder there is a menu.py file that is used to add 5 relative plugin paths. These are the following folders: ./gizmos - for all NST gizmo files ./nk_files - for all NST .nk scripts ./python - 1 helper file, and a handful of tool-specific python files ./icons - for all tool icons ./images - for all image files required for some tools/examples This has changed from the v1.1.1 version of the NST to be relative paths. There were some network startup slowdowns happening from nuke recursively adding many pluginPaths in the previous init.py. Removing all the folders and narrowing it down to just 5 seemed to speed up start up time while keeping the menu looking the same. Also adding the plugin paths in the menu instead of the init made sure that there was not unnecessary load time happening for renderfarms or command-line nuke sessions where the GUI and menu isn\u2019t needed. The menu.py in the main folder is primarily building almost the entire toolkit menu. You will find it organized into sections: Draw, Time, Color, Filter , etc. The tools will show up in the order that you designate them in this menu. Nuke does not like to load multiple gizmo files with the same name. Because the Nuke Survival Toolkit may be added into company pipelines that already have many gizmo\u2019s being loaded in, I have given all .gizmo files their own prefix \u201cNST_\u201d . This means all files should have a unique name to any file that would be already installed. For example, if there was an iBlur.gizmo installed, the one in Nuke Survival Toolkit is named NST_iBlur.gizmo , so there should be no conflicts. In the main menu.py at the top, there is a variable that you can replace if you choose to find/replace the \"NST_\" prefix to a custom one for all the gizmos. You could do this with a renaming software or via the terminal for all gizmos with the \"NST_\" prefix. If you change \"NST_\" to \"WOW_\" for example, just enter \"WOW_\" in this variable. This might help if two different Nuke Survival Toolkits are being loaded at once, to keep them unique. All gizmo\u2019s are stored as .gizmo files on the folder system, but are all actually loaded into nuke as Groups, with no link back to the gizmo filepath. This is a strange bug / feature / work around that sort of tricks nuke into thinking you have loaded a gizmo, but actually have loaded a group. There are a few advantages to this method: Nuke will automatically open the properties panel of the tool, unlike if you nuke.nodePaste() a .nk file Nuke actually stores the defaults of the gizmo in memory, during that specific nuke session. This means you will be able to ctrl + right click on knobs and reset them to their intended default settings. This unfortunately goes away once you close and re-open the script, as nuke will just consider the nodes a normal group and will not know what the defaults are. Groups are generally easier to debug and enter inside to see what is going on. This will help with render farms or other users opening scripts that would normally be sourcing the gizmos from wherever you have placed the Nuke Survival Toolkit. Sometimes render farms or other users cannot access your local directories, which might cause errors when other artists or render farms are trying to open the script, since they may not be loading the NukeSurvivalToolkit. Making sure the tools are Groups will mean the tools exist in your nuke script and will never be unlinked/unsourced when someone else is opening the nuke script. If you prefer to use gizmos instead of groups, you simply have to open the gizmo in a text editor and change where it says \"Group\" at the top of each .gizmo file, and replace it with \"Gizmo\" . It is case sensitive, so make sure you capitalize Gizmo or Group. Removed all x and y node graph positions from the gizmos, (xpos and ypos). If you leave these in; when you have a node selected and create a gizmo, instead of spawning under the node, it can fly to the part of the node graph where the x and y positions were stored at. Removed all Nuke Version lines from the gizmos to avoid annoying errors about different versions. Most of these tools were tested using Nuke 11.3v4, but that does not mean they require that version. Some gizmos were created for different versions, so please use the links provided to see what versions the tools are compatible with if something is not working. Tried consolidating the types of channels the gizmos might be bringing into your scripts by making sure they are using the same types of channel names. For example, all Position World pass channels will come in as P.red, P.green, P.blue, P.alpha , and all Normals World pass channels will come in as N.red, N.green, N.blue, N.alpha . There are a few exceptions where some tools are using unique channel names, but for the most part they are always using .red, .green, .blue, .alpha, .u, or .v at the end of the channels. Most channel/layer names are kept as the original tool had them. For example apChroma, hag_pos, despill, etc. Added an Author Tag to the end of all Gizmos in the menu. NKPD just stands for Nukepedia, where I did not make a custom tag if there weren't many tools from this author. These might help in 2 ways: To filter for certain tools if you want to search by all of Adrian Pueyo\u2019s AP tools or Mark Joey Tang\u2019s MJT tools using nuke\u2019s tab search. Will also help you identify who made what, and make it easier to find in the Tool Documentation To help identify that this gizmo is from the Nuke Survival Toolkit, in case there are duplicate tools in the pipeline loaded with the same name. Dealing with Hard Coded filepaths on Gizmo Creation There is a function, filepathCreateNode() , stored in the NST_helper.py file, that first detects if the Group/Gizmo being created has a Read, DeepRead, ReadGeo, Camera, Axis . Then, if the file knob in the node contains the string <<<replace>>> in the filepath, this will be replaced by the location where the NukeSurvivalToolkit is stored. This means for templates, example scripts, and occasional gizmos that require image files, They will be created with hardcoded links pointing to images in the Nuke Survival Toolkit. This was necessary because if I manually hardcoded the filepath, it will error because it does not know where your NST image is. If you use a live variable, similar to [root.name] to try and point to the NST, it will work for you and anyone with the same NST installed, but not if you try and render on a renderfarm without the NST installed or pass the script to the artist without the NST installed, as nuke won\u2019t find the variable and won\u2019t know where to point to. Replacing the variable and hard coding the filepath on creation is the best way to make sure the tool to work with anyone opening the script, as long as the Nuke Survival Toolkit does not move locations, or the image file is not moved, deleted, renamed, etc","title":"Technical Details"}]}